/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Pipeline;


import Datapath.AboutForm;
import Datapath.Datapath;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.border.TitledBorder;


/**
 *
 * @author THELINH
 */
public class Pipeline extends javax.swing.JFrame {

    /**
     * Creates new form Pipeline
     */
    public Pipeline() {
        initComponents();
        ImageIcon icon = new ImageIcon(getClass().getResource("/Icon.png"));
        Image image = icon.getImage();
        this.setIconImage(image);
        cboRD = new ArrayList<JComboBox>();
        cboRS = new ArrayList<JComboBox>();
        cboRT = new ArrayList<JComboBox>();
        lblLenh = new ArrayList<JLabel>();
        panelCmd = new ArrayList<JPanel>();
        tfoffset = new ArrayList<JTextField>();
        InsType = new ArrayList<cmd>();
        btnDelLenh = new ArrayList<JButton>();
        lForButton = new ListenForButton();
        btnAdd.addActionListener(lForButton);
        mnuiAdd.addActionListener(lForButton);
        btnSub.addActionListener(lForButton);
        mnuiSub.addActionListener(lForButton);
        btnOr.addActionListener(lForButton);
        mnuiOr.addActionListener(lForButton);
        btnAnd.addActionListener(lForButton);
        mnuiAnd.addActionListener(lForButton);
        btnLw.addActionListener(lForButton);
        mnuiLw.addActionListener(lForButton);
        btnSw.addActionListener(lForButton);
        mnuiSw.addActionListener(lForButton);
        btnSlt.addActionListener(lForButton);
        mnuiSlt.addActionListener(lForButton);
        gbtCheDo.add(rbtForwarding);
        gbtCheDo.add(rbtNonForwarding);
        rbtNonForwarding.setSelected(true);
        tfChuki.setText("");
    }

    void Start()
    {
        if(!CheckError() && !InsType.isEmpty())
        {   
            if(drawpanel != null)
            {
                drawpanel = null;
                scrpModelDraw.setViewportView(null);
            }
            if(rbtNonForwarding.isSelected())
                FindNonForwardingConflict();
            else if(rbtForwarding.isSelected())
                FindForwardingConflict();
            drawpanel = new DrawPipeline(panelCmd.size());
            drawpanel.setPreferredSize(new Dimension(1800,1060));
            scrpModelDraw.setViewportView(drawpanel);
            tfChuki.setText(Integer.toString(5 + drawpanel.getMaxInsNum()));
            tfChuki.setEditable(false);
            for(int i=0 ;i<btnDelLenh.size();i++)
            {
                btnDelLenh.get(i).setEnabled(false);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gbtCheDo = new javax.swing.ButtonGroup();
        scpLenh = new javax.swing.JScrollPane();
        pnlView = new javax.swing.JPanel();
        pnlCmd = new javax.swing.JPanel();
        btnSub = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnAnd = new javax.swing.JButton();
        btnSlt = new javax.swing.JButton();
        btnSw = new javax.swing.JButton();
        btnLw = new javax.swing.JButton();
        btnOr = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnBatDau = new javax.swing.JButton();
        rbtForwarding = new javax.swing.JRadioButton();
        rbtNonForwarding = new javax.swing.JRadioButton();
        tfChuki = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        scrpModelDraw = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuCheDo = new javax.swing.JMenu();
        mnuiDatapath = new javax.swing.JMenuItem();
        mnuiPipeline = new javax.swing.JMenuItem();
        mnuLenh = new javax.swing.JMenu();
        mnuiBatDau = new javax.swing.JMenuItem();
        mnuiAdd = new javax.swing.JMenuItem();
        mnuiSub = new javax.swing.JMenuItem();
        mnuiSw = new javax.swing.JMenuItem();
        mnuiLw = new javax.swing.JMenuItem();
        mnuiOr = new javax.swing.JMenuItem();
        mnuiAnd = new javax.swing.JMenuItem();
        mnuiSlt = new javax.swing.JMenuItem();
        mnuGiupdo = new javax.swing.JMenu();
        mnuiGuide = new javax.swing.JMenuItem();
        mnuiAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mô phỏng Pipeline");
        setExtendedState(6);
        setPreferredSize(new java.awt.Dimension(1300, 558));

        pnlView.setPreferredSize(new java.awt.Dimension(480, 500));

        javax.swing.GroupLayout pnlViewLayout = new javax.swing.GroupLayout(pnlView);
        pnlView.setLayout(pnlViewLayout);
        pnlViewLayout.setHorizontalGroup(
            pnlViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        pnlViewLayout.setVerticalGroup(
            pnlViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        scpLenh.setViewportView(pnlView);

        btnSub.setText("sub");

        btnAdd.setText("add");

        btnAnd.setText("and");

        btnSlt.setText("slt");

        btnSw.setText("sw");

        btnLw.setText("lw");

        btnOr.setText("or");

        javax.swing.GroupLayout pnlCmdLayout = new javax.swing.GroupLayout(pnlCmd);
        pnlCmd.setLayout(pnlCmdLayout);
        pnlCmdLayout.setHorizontalGroup(
            pnlCmdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCmdLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCmdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCmdLayout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSub, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSw, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLw, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlCmdLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnOr, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAnd, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSlt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))))
        );
        pnlCmdLayout.setVerticalGroup(
            pnlCmdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCmdLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCmdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSub, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSw, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLw, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCmdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOr, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAnd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSlt, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnBatDau.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBatDau.setForeground(new java.awt.Color(255, 0, 0));
        btnBatDau.setText("Bắt Đầu");
        btnBatDau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatDauActionPerformed(evt);
            }
        });

        rbtForwarding.setText("Forwarding");

        rbtNonForwarding.setText("Non-Forwarding");

        jLabel1.setText("Tổng số chu kỳ :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBatDau, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rbtNonForwarding)
                .addGap(18, 18, 18)
                .addComponent(rbtForwarding)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 232, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfChuki, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnBatDau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtForwarding)
                            .addComponent(rbtNonForwarding)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfChuki, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        scrpModelDraw.setBorder(javax.swing.BorderFactory.createTitledBorder("Mô phỏng"));

        mnuCheDo.setText("Chế độ");

        mnuiDatapath.setText("Mô phỏng Datapath");
        mnuiDatapath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuiDatapathActionPerformed(evt);
            }
        });
        mnuCheDo.add(mnuiDatapath);

        mnuiPipeline.setText("Mô phỏng Pipeline");
        mnuiPipeline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuiPipelineActionPerformed(evt);
            }
        });
        mnuCheDo.add(mnuiPipeline);

        jMenuBar1.add(mnuCheDo);

        mnuLenh.setText("Lệnh");
        mnuLenh.setToolTipText("");

        mnuiBatDau.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        mnuiBatDau.setText("Bắt đầu");
        mnuiBatDau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuiBatDauActionPerformed(evt);
            }
        });
        mnuLenh.add(mnuiBatDau);

        mnuiAdd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        mnuiAdd.setText("Lệnh Add");
        mnuLenh.add(mnuiAdd);

        mnuiSub.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        mnuiSub.setText("Lệnh Sub");
        mnuLenh.add(mnuiSub);

        mnuiSw.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        mnuiSw.setText("Lệnh Sw");
        mnuLenh.add(mnuiSw);

        mnuiLw.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_MASK));
        mnuiLw.setText("Lệnh Lw");
        mnuLenh.add(mnuiLw);

        mnuiOr.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.CTRL_MASK));
        mnuiOr.setText("Lệnh Or");
        mnuLenh.add(mnuiOr);

        mnuiAnd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.CTRL_MASK));
        mnuiAnd.setText("Lệnh And");
        mnuLenh.add(mnuiAnd);

        mnuiSlt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.CTRL_MASK));
        mnuiSlt.setText("Lệnh Slt");
        mnuLenh.add(mnuiSlt);

        jMenuBar1.add(mnuLenh);

        mnuGiupdo.setText("Giúp đỡ");

        mnuiGuide.setText("Hướng dẫn");
        mnuiGuide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuiGuideActionPerformed(evt);
            }
        });
        mnuGiupdo.add(mnuiGuide);

        mnuiAbout.setText("Về chương trình");
        mnuiAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuiAboutActionPerformed(evt);
            }
        });
        mnuGiupdo.add(mnuiAbout);

        jMenuBar1.add(mnuGiupdo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scpLenh)
                    .addComponent(pnlCmd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrpModelDraw)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scpLenh, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlCmd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrpModelDraw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBatDauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatDauActionPerformed
        Start();
    }//GEN-LAST:event_btnBatDauActionPerformed

    private boolean CheckError()
    {
        int j=0;
        for(int i=0;i<panelCmd.size();i++)
        {
                if(cboRS.get(i).getSelectedItem().toString().equals("<choose>")||cboRT.get(i).getSelectedItem().toString().equals("<choose>"))
                {
                    JOptionPane.showMessageDialog(this, "Chưa chọn hết thanh ghi, không thể chạy mô phỏng", "Warning", JOptionPane.ERROR_MESSAGE);
                    return true;
                }
                
        }
        for(JComboBox item : cboRD)
        {
            if(item.getSelectedItem().toString().equals("<choose>"))
            {
                    JOptionPane.showMessageDialog(this, "Chưa chọn hết thanh ghi, không thể chạy mô phỏng", "Warning", JOptionPane.ERROR_MESSAGE);
                    return true;
                }
        }
        return false;  
    }
    
    private void FindNonForwardingConflict()
    {
        DrawPipeline.isNoop.removeAll(DrawPipeline.isNoop); // Reset cac gia tri isNoop
        if(panelCmd.size()>1)   //chi bat dau tim xung dot khi so lenh lon hon 1, neu so lenh la 1 thi khong can tim
        {
            //method nay se tim xung dot tu duoi len
            //tuc la khi xet lenh co index la 1 thì se xet xung dot tren cac thanh ghi o lenh co index la 0
            // Xet lenh co index la 2 thi se xet xung dot tren cac thanh ghi o lenh co index la 0 va 1
            // Xet lenh co index la 3 thi se xet xung dot tren cac thanh ghi o lenh co index la 1 va 2
            // Xet lenh co index la 4 thi se xet xung dot tren cac thanh ghi o lenh co index la 2 va 3
            // Cac thanh ghi co the gay ra xung dot o lenh truoc la RD (R type) hoac RS(I-Type)
            String oldregtypeRD;    //luu gia tri thanh ghi RD cua cac lenh truoc lenh dang xet
            String oldregtypeRS;    //luu gia tri thanh ghi RS cua cac lenh truoc lenh dang xet
            String regtypeRS;       //luu gia tri thanh ghi RS o lenh dang xet
            String regtypeRT;       //luu gia tri thanh ghi RT o lenh dang xet
            int indexRD = 0;        //luu chi so cua thanh ghi RD (vi thanh ghi chi co lenh R type moi co)
 
            for(int i=1;i<panelCmd.size();i++) //xet xung dot tu lenh co chi so la 1
            {
                   if(InsType.get(i-1) == cmd.ADD || InsType.get(i-1)==cmd.SUB||InsType.get(i-1) == cmd.AND ||InsType.get(i-1) == cmd.OR||InsType.get(i-1) == cmd.SLT)
                   {    //Xet lenh i-1 la R type
                        //Vi la R type nen luu gia tri thanh ghi co index la indexRD vao bien oldregtypeRD
                        // luu thanh ghi RS, RT cua lenh dang xet vao bien regtypeRS va regtypeRT
                        oldregtypeRD = cboRD.get(indexRD).getSelectedItem().toString();
                        regtypeRS = cboRS.get(i).getSelectedItem().toString();
                        regtypeRT = cboRT.get(i).getSelectedItem().toString();
                        if(InsType.get(i) == cmd.LW) //truong hop lenh dang xet la LW thi chi xet moi thanh ghi RT
                        {
                            if(regtypeRT.equals(oldregtypeRD))
                            {
                                DrawPipeline.isNoop.add(NoopState.twoNoop);
                            }
                            else
                                DrawPipeline.isNoop.add(NoopState.none);
                        }
                        else  //cac truong hop con lai thi xet ca 2 thanh ghi RS,RT
                        {
                            if(regtypeRT.equals(oldregtypeRD) || regtypeRS.equals(oldregtypeRD))
                            {
                                DrawPipeline.isNoop.add(NoopState.twoNoop);
                            }
                            else
                                DrawPipeline.isNoop.add(NoopState.none);
                        }
                       indexRD++; //vi lenh truoc la lenh R type co thanh ghi RD nen se cong bien indexRD len 1
                   }
                   else if(InsType.get(i-1) == cmd.LW)
                   {
                       //Xet lenh i-1 la LW
                        //Vi la LW nen luu gia tri thanh ghi co index la i-1 vao bien oldregtypeRS
                        // luu thanh ghi RS, RT cua lenh dang xet vao bien regtypeRS va regtypeRT
                       oldregtypeRS = cboRS.get(i-1).getSelectedItem().toString();
                       regtypeRS = cboRS.get(i).getSelectedItem().toString();
                       regtypeRT = cboRT.get(i).getSelectedItem().toString();
                       if(InsType.get(i) == cmd.LW)//truong hop lenh dang xet la LW thi chi xet moi thanh ghi RT
                        {
                            if(regtypeRT.equals(oldregtypeRS))
                            {
                                DrawPipeline.isNoop.add(NoopState.twoNoop);
                            }
                            else
                                DrawPipeline.isNoop.add(NoopState.none);
                        }
                        else    //cac truong hop con lai thi xet ca 2 thanh ghi RS,RT
                        {
                            if(regtypeRT.equals(oldregtypeRS) || regtypeRS.equals(oldregtypeRS))
                            {
                                DrawPipeline.isNoop.add(NoopState.twoNoop);
                            }
                            else
                                DrawPipeline.isNoop.add(NoopState.none);
                        }
                   }
                   else   //cac truong hop con lai khong ghi thanh ghi nguoc ve Reg nen khong xet
                       DrawPipeline.isNoop.add(NoopState.none);
                   //Tiep tuc kiem tra lenh i-2
                   //neu i=1 thi khong vao nhanh if nay
                   //neu i!=1 thi kiem tra xem lenh i va i-1 co xay ra dung do hay khong neu co thi bo qua nhanh if nay
                   //neu i va i-1 khong co dung do thi kiem tra i-1 va i-2 co xay ra dung do hay khong neu co cung bo qua nhanh if nay
                   if(i!=1 && DrawPipeline.isNoop.get(DrawPipeline.isNoop.size()-1) == NoopState.none && DrawPipeline.isNoop.get(DrawPipeline.isNoop.size()-2) == NoopState.none)
                   {
                        if(InsType.get(i-2) == cmd.ADD || InsType.get(i-2)==cmd.SUB||InsType.get(i-2) == cmd.AND ||InsType.get(i-2) == cmd.OR||InsType.get(i-2) == cmd.SLT)
                        {
                            //xet lenh i-2 la R-Type
                            //xet tiep lenh i-1 cung la Rtype thi ta luu oldregtype la gia tri cua thanh ghi RD co index la indexRD-2
                            //neu i-1 khong phai lenh R thi luu oldregtype la gia tri cua thanh ghi co index la indexRD-1
                            //Lam tuong tu nhu truong hop truoc
                            if(InsType.get(i-1) == cmd.ADD || InsType.get(i-1)==cmd.SUB||InsType.get(i-1) == cmd.AND ||InsType.get(i-1) == cmd.OR||InsType.get(i-1) == cmd.SLT)
                                oldregtypeRD = cboRD.get(indexRD-2).getSelectedItem().toString();
                            else
                                oldregtypeRD = cboRD.get(indexRD-1).getSelectedItem().toString();
                            regtypeRS = cboRS.get(i).getSelectedItem().toString();
                            regtypeRT = cboRT.get(i).getSelectedItem().toString();
                            if(InsType.get(i) == cmd.LW)
                            {
                                if(regtypeRT.equals(oldregtypeRD))
                                    DrawPipeline.isNoop.set(DrawPipeline.isNoop.size()-1, NoopState.oneNoop);
                            }
                            else
                            {
                                if(regtypeRT.equals(oldregtypeRD) || regtypeRS.equals(oldregtypeRD))
                                    DrawPipeline.isNoop.set(DrawPipeline.isNoop.size()-1, NoopState.oneNoop);
                            }
                        }
                        else if(InsType.get(i-2) == cmd.LW)
                        {
                            //xet lenh i-2 la lenh LW
                            //Lam tuong tu nhu cac truong hop truoc
                            oldregtypeRS = cboRS.get(i-2).getSelectedItem().toString();
                            regtypeRS = cboRS.get(i).getSelectedItem().toString();
                            regtypeRT = cboRT.get(i).getSelectedItem().toString();
                            if(InsType.get(i) == cmd.LW)
                            {
                                if(regtypeRT.equals(oldregtypeRS))
                                    DrawPipeline.isNoop.set(DrawPipeline.isNoop.size()-1, NoopState.oneNoop);
                            }
                            else
                            {
                                if(regtypeRT.equals(oldregtypeRS) || regtypeRS.equals(oldregtypeRS))
                                    DrawPipeline.isNoop.set(DrawPipeline.isNoop.size()-1, NoopState.oneNoop);
                            }
                        }
                        //khong can xet truong hop con lai vi truoc do da gan isNoop tai may dong code nay la none roi
                   }
            }
        }
    }
    
    private void FindForwardingConflict(){
        DrawPipeline.isNoop.removeAll(DrawPipeline.isNoop);
        if(panelCmd.size()>1){
            String oldRegRD;
            String oldRegRS;
            String RegRS;
            String RegRT;
            int indexRD=0;
            for(int i=1;i<panelCmd.size();i++){
                /*
                EX-EX
                add $s1, $s2, $s3
                sub $s4, $s1, $s7
                */
                if(InsType.get(i-1)==cmd.ADD||InsType.get(i-1)==cmd.OR||InsType.get(i-1)==cmd.AND||InsType.get(i-1)==cmd.SUB||InsType.get(i-1)==cmd.SLT){
                   
                    DrawPipeline.isNoop.add(NoopState.none);
                    indexRD++; //Tang gia tri cua bien luu vi tri cua cboRD trong ArrayList
                }
                else if(InsType.get(i-1)==cmd.LW){
                        /*
                        MEM - EX
                        lw $s1, 20($s2)
                        add $s3,$s1,$s4
                        */
                        oldRegRS = cboRS.get(i-1).getSelectedItem().toString();
                            RegRS = cboRS.get(i).getSelectedItem().toString();
                            RegRT = cboRT.get(i).getSelectedItem().toString();
                        if(InsType.get(i)==cmd.ADD||InsType.get(i)==cmd.OR||InsType.get(i)==cmd.AND||InsType.get(i)==cmd.SUB||InsType.get(i)==cmd.SLT){
                            //$s1 của lw bị xung đột
                            if(RegRS.equals(oldRegRS)||RegRT.equals(oldRegRS)){
                                DrawPipeline.isNoop.add(NoopState.oneNoop);
                            }
                            else
                                DrawPipeline.isNoop.add(NoopState.none);
                        }
                        else if(InsType.get(i)==cmd.LW)
                        {
                            if(RegRT.equals(oldRegRS)){
                                DrawPipeline.isNoop.add(NoopState.oneNoop);
                            }
                            else
                                DrawPipeline.isNoop.add(NoopState.none);
                        }
                }
            }
        }
    }

    
    
    private void mnuiPipelineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuiPipelineActionPerformed
        // TODO add your handling code here:
        Pipeline.StartPipeline();
        this.dispose();
    }//GEN-LAST:event_mnuiPipelineActionPerformed

    private void mnuiDatapathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuiDatapathActionPerformed
        // TODO add your handling code here:
        Datapath.StartDatapath();
        this.dispose();
    }//GEN-LAST:event_mnuiDatapathActionPerformed

    private void mnuiBatDauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuiBatDauActionPerformed
        // TODO add your handling code here:
        Start();
    }//GEN-LAST:event_mnuiBatDauActionPerformed

    private void mnuiGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuiGuideActionPerformed
        // TODO add your handling code here:
        GuideForm.StartGuideForm();
    }//GEN-LAST:event_mnuiGuideActionPerformed

    private void mnuiAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuiAboutActionPerformed
        // TODO add your handling code here:
        AboutForm.StartAboutForm();
    }//GEN-LAST:event_mnuiAboutActionPerformed

    public static void StartPipeline() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pipeline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pipeline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pipeline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pipeline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Pipeline().setVisible(true);
            }
        });
        
    }
    
    
    private void add(int x, int y ) {
        panelCmd.add( new JPanel());
        panelCmd.get(panelCmd.size()-1).setBounds(x, y, 440, 80);
        panelCmd.get(panelCmd.size()-1).setBorder(new TitledBorder("Lệnh "+ buttonClicked));
        InsType.add(cmd.ADD);
        
      

        lblLenh.add(new JLabel(" add $"));
        lblLenh.get(lblLenh.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblLenh.get(lblLenh.size()-1));
        
        cboRD.add(new JComboBox(Reg));
        cboRD.get(cboRD.size()-1).setSize(75,20);
        cboRD.get(cboRD.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRD.get(cboRD.size()-1));
        
        JLabel lblSpace1 = new JLabel(", $");
        lblSpace1.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace1);
        
        cboRS.add(new JComboBox(Reg));
        cboRS.get(cboRS.size()-1).setSize(75,20);
        cboRS.get(cboRS.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRS.get(cboRS.size()-1));
        
        JLabel lblSpace2 = new JLabel(", $");
        lblSpace2.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace2);
        
        cboRT.add(new JComboBox(Reg));
        cboRT.get(cboRT.size()-1).setSize(75,20);
        cboRT.get(cboRT.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRT.get(cboRT.size()-1));
        
        btnDelLenh.add(new JButton());
        btnDelLenh.get(btnDelLenh.size()-1).setText("Xóa");
        btnDelLenh.get(btnDelLenh.size()-1).setVisible(true);
        btnDelLenh.get(btnDelLenh.size()-1).addActionListener(lForButton);
        panelCmd.get(panelCmd.size()-1).add(btnDelLenh.get(btnDelLenh.size()-1));
        
                
        pnlView.add(panelCmd.get(panelCmd.size()-1));
        pnlView.repaint();
        
        }
    
    private void sw(int x, int y) {
       panelCmd.add(new JPanel());
        panelCmd.get(panelCmd.size()-1).setBounds(x, y, 440, 80);
        panelCmd.get(panelCmd.size()-1).setBorder(new TitledBorder("Lệnh "+buttonClicked));
        InsType.add(cmd.SW);
        
        lblLenh.add(new JLabel(" sw $"));
        lblLenh.get(lblLenh.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblLenh.get(lblLenh.size()-1));
        
        cboRS.add(new JComboBox(Reg));
        cboRS.get(cboRS.size()-1).setSize(75,20);
        cboRS.get(cboRS.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRS.get(cboRS.size()-1));
        
        JLabel lblSpace1 = new JLabel(" , ");
        lblSpace1.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace1);
        
        tfoffset.add(new JTextField("offset"));
        tfoffset.get(tfoffset.size()-1).setPreferredSize(new Dimension(50,26));
        tfoffset.get(tfoffset.size()-1).setVisible(true);
        tfoffset.get(tfoffset.size()-1).setEditable(false);
        panelCmd.get(panelCmd.size()-1).add(tfoffset.get(tfoffset.size()-1));
        
        JLabel lblSpace2 = new JLabel("  (");
        lblSpace2.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace2);
        
        cboRT.add(new JComboBox(Reg));
        cboRT.get(cboRT.size()-1).setSize(75,20);
        cboRT.get(cboRT.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRT.get(cboRT.size()-1));
        
        JLabel lblSpace3 = new JLabel(")               ");
        lblSpace3.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace3);
        
         btnDelLenh.add(new JButton());
        btnDelLenh.get(btnDelLenh.size()-1).setText("Xóa");
        btnDelLenh.get(btnDelLenh.size()-1).setVisible(true);
        btnDelLenh.get(btnDelLenh.size()-1).addActionListener(lForButton);
        panelCmd.get(panelCmd.size()-1).add(btnDelLenh.get(btnDelLenh.size()-1));
        
        pnlView.add(panelCmd.get(panelCmd.size()-1));
        pnlView.repaint();
        
        }
    
    private void lw(int x, int y ) {
        panelCmd.add(new JPanel());
        panelCmd.get(panelCmd.size()-1).setBounds(x, y, 440, 80);
        panelCmd.get(panelCmd.size()-1).setBorder(new TitledBorder("Lệnh "+buttonClicked));
        InsType.add(cmd.LW);
        
        lblLenh.add(new JLabel(" lw $"));
        lblLenh.get(lblLenh.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblLenh.get(lblLenh.size()-1));
        
        cboRS.add(new JComboBox(Reg));
        cboRS.get(cboRS.size()-1).setSize(75,20);
        cboRS.get(cboRS.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRS.get(cboRS.size()-1));
        
        JLabel lblSpace1 = new JLabel(" , ");
        lblSpace1.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace1);
        
        tfoffset.add(new JTextField("offset"));
        tfoffset.get(tfoffset.size()-1).setPreferredSize(new Dimension(50,26));
        tfoffset.get(tfoffset.size()-1).setVisible(true);
        tfoffset.get(tfoffset.size()-1).setEditable(false);
        panelCmd.get(panelCmd.size()-1).add(tfoffset.get(tfoffset.size()-1));
        
        JLabel lblSpace2 = new JLabel("  (");
        lblSpace2.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace2);
        
        cboRT.add(new JComboBox(Reg));
        cboRT.get(cboRT.size()-1).setSize(75,20);
        cboRT.get(cboRT.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRT.get(cboRT.size()-1));
        
        JLabel lblSpace3 = new JLabel(")               ");
        lblSpace3.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace3);
        
         btnDelLenh.add(new JButton());
        btnDelLenh.get(btnDelLenh.size()-1).setText("Xóa");
        btnDelLenh.get(btnDelLenh.size()-1).setVisible(true);
        btnDelLenh.get(btnDelLenh.size()-1).addActionListener(lForButton);
        panelCmd.get(panelCmd.size()-1).add(btnDelLenh.get(btnDelLenh.size()-1));
        
        pnlView.add(panelCmd.get(panelCmd.size()-1));
        pnlView.repaint();
        
        }
    
    private void or(int x, int y ) {
        panelCmd.add( new JPanel());
        panelCmd.get(panelCmd.size()-1).setBounds(x, y, 440, 80);
        panelCmd.get(panelCmd.size()-1).setBorder(new TitledBorder("Lệnh "+buttonClicked));
        InsType.add(cmd.OR);
        
        lblLenh.add(new JLabel("    or $"));
         lblLenh.get(lblLenh.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblLenh.get(lblLenh.size()-1));
        
        cboRD.add(new JComboBox(Reg));
        cboRD.get(cboRD.size()-1).setSize(75,20);
        cboRD.get(cboRD.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRD.get(cboRD.size()-1));
        
        JLabel lblSpace1 = new JLabel(", $");
        lblSpace1.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace1);
        
        cboRS.add(new JComboBox(Reg));
        cboRS.get(cboRS.size()-1).setSize(75,20);
        cboRS.get(cboRS.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRS.get(cboRS.size()-1));
        
        JLabel lblSpace2 = new JLabel(", $");
        lblSpace2.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace2);
        
        cboRT.add(new JComboBox(Reg));
        cboRT.get(cboRT.size()-1).setSize(75,20);
        cboRT.get(cboRT.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRT.get(cboRT.size()-1));
        
         btnDelLenh.add(new JButton());
        btnDelLenh.get(btnDelLenh.size()-1).setText("Xóa");
        btnDelLenh.get(btnDelLenh.size()-1).setVisible(true);
        btnDelLenh.get(btnDelLenh.size()-1).addActionListener(lForButton);
        panelCmd.get(panelCmd.size()-1).add(btnDelLenh.get(btnDelLenh.size()-1));
        
        
        pnlView.add(panelCmd.get(panelCmd.size()-1));
        pnlView.repaint();
       
        }
    
    private void sub(int x, int y ) {
        panelCmd.add( new JPanel());
        panelCmd.get(panelCmd.size()-1).setBounds(x, y, 440, 80);
        panelCmd.get(panelCmd.size()-1).setBorder(new TitledBorder("Lệnh "+buttonClicked));
        InsType.add(cmd.SUB);
        
        lblLenh.add(new JLabel(" sub $"));
         lblLenh.get(lblLenh.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblLenh.get(lblLenh.size()-1));
        
        
        cboRD.add(new JComboBox(Reg));
        cboRD.get(cboRD.size()-1).setSize(75,20);
        cboRD.get(cboRD.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRD.get(cboRD.size()-1));
        
        JLabel lblSpace1 = new JLabel(", $");
        lblSpace1.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace1);
        
        cboRS.add(new JComboBox(Reg));
        cboRS.get(cboRS.size()-1).setSize(75,20);
        cboRS.get(cboRS.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRS.get(cboRS.size()-1));
        
        JLabel lblSpace2 = new JLabel(", $");
        lblSpace2.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace2);
        
        cboRT.add(new JComboBox(Reg));
        cboRT.get(cboRT.size()-1).setSize(75,20);
        cboRT.get(cboRT.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRT.get(cboRT.size()-1));
        
         btnDelLenh.add(new JButton());
        btnDelLenh.get(btnDelLenh.size()-1).setText("Xóa");
        btnDelLenh.get(btnDelLenh.size()-1).setVisible(true);
        btnDelLenh.get(btnDelLenh.size()-1).addActionListener(lForButton);
        panelCmd.get(panelCmd.size()-1).add(btnDelLenh.get(btnDelLenh.size()-1));
        
        
        pnlView.add(panelCmd.get(panelCmd.size()-1));
        pnlView.repaint();

        }
    
    private void and(int x, int y ) {
        panelCmd.add( new JPanel());
        panelCmd.get(panelCmd.size()-1).setBounds(x, y, 440, 80);
        panelCmd.get(panelCmd.size()-1).setBorder(new TitledBorder("Lệnh "+buttonClicked));
        InsType.add(cmd.AND);
        
        lblLenh.add(new JLabel(" and $"));
        lblLenh.get(lblLenh.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblLenh.get(lblLenh.size()-1));
        
        cboRD.add(new JComboBox(Reg));
        cboRD.get(cboRD.size()-1).setSize(75,20);
        cboRD.get(cboRD.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRD.get(cboRD.size()-1));
        
        JLabel lblSpace1 = new JLabel(", $");
        lblSpace1.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace1);
        
        cboRS.add(new JComboBox(Reg));
        cboRS.get(cboRS.size()-1).setSize(75,20);
        cboRS.get(cboRS.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRS.get(cboRS.size()-1));
        
        JLabel lblSpace2 = new JLabel(", $");
        lblSpace2.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace2);
        
        cboRT.add( new JComboBox(Reg));
        cboRT.get(cboRT.size()-1).setSize(75,20);
        cboRT.get(cboRT.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRT.get(cboRT.size()-1));
        
        btnDelLenh.add(new JButton());
        btnDelLenh.get(btnDelLenh.size()-1).setText("Xóa");
        btnDelLenh.get(btnDelLenh.size()-1).setVisible(true);
        btnDelLenh.get(btnDelLenh.size()-1).addActionListener(lForButton);
        panelCmd.get(panelCmd.size()-1).add(btnDelLenh.get(btnDelLenh.size()-1));
        
       
        pnlView.add(panelCmd.get(panelCmd.size()-1));
        }
    
    private void slt(int x, int y  ) {
        panelCmd.add( new JPanel());
        panelCmd.get(panelCmd.size()-1).setBounds(x, y, 440, 80);
        panelCmd.get(panelCmd.size()-1).setBorder(new TitledBorder("Lệnh "+ buttonClicked));
        InsType.add(cmd.SLT);
        
        lblLenh.add(new JLabel("  slt $ "));
         lblLenh.get(lblLenh.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblLenh.get(lblLenh.size()-1));
        
        cboRD.add(new JComboBox(Reg));
        cboRD.get(cboRD.size()-1).setSize(75,20);
        cboRD.get(cboRD.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRD.get(cboRD.size()-1));
        
        JLabel lblSpace1 = new JLabel(", $");
        lblSpace1.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace1);
        
        cboRS.add(new JComboBox(Reg));
        cboRS.get(cboRS.size()-1).setSize(75,20);
        cboRS.get(cboRS.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRS.get(cboRS.size()-1));
        
        JLabel lblSpace2 = new JLabel(", $");
        lblSpace2.setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(lblSpace2);
        
        cboRT.add(new JComboBox(Reg));
        cboRT.get(cboRT.size()-1).setSize(75,20);
        cboRT.get(cboRT.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(cboRT.get(cboRT.size()-1));
        
        btnDelLenh.add(new JButton());
        btnDelLenh.get(btnDelLenh.size()-1).setText("Xóa");
        btnDelLenh.get(btnDelLenh.size()-1).addActionListener(lForButton);
        btnDelLenh.get(btnDelLenh.size()-1).setVisible(true);
        panelCmd.get(panelCmd.size()-1).add(btnDelLenh.get(btnDelLenh.size()-1));
        
        
        pnlView.add(panelCmd.get(panelCmd.size()-1));
        pnlView.repaint();

        }
    
    
        
    
   
    public class ListenForButton implements ActionListener{
    @Override
    public void actionPerformed(ActionEvent e){
        
        if(e.getSource() == btnAdd || e.getSource() == mnuiAdd){
            if(panelCmd.size() >= 5 ){
            JOptionPane.showMessageDialog(null, "Số Lệnh đã vượt quá 5 ","Lỗi",JOptionPane.OK_OPTION);
            } else {
            add(x,y);    
            buttonClicked++;
            y += 100;
            
        }  
        }
        else if(e.getSource() == btnSub || e.getSource()==mnuiSub){ 
            if(panelCmd.size() >= 5 ){
            JOptionPane.showMessageDialog(null, "Số Lệnh đã vượt quá 5 ","Lỗi",JOptionPane.OK_OPTION);
            } else {
          
            sub(x,y);
            buttonClicked++;
            y += 100;
            
            }
            }
        else if(e.getSource() == btnLw || e.getSource() == mnuiLw){
                if(panelCmd.size() >= 5 ){
                JOptionPane.showMessageDialog(null, "Số Lệnh đã vượt quá 5 ","Lỗi",JOptionPane.OK_OPTION);
                } else {
                lw(x,y);            
                buttonClicked++;
                y += 100;

            }
            }
        else if(e.getSource() == btnSw || e.getSource() == mnuiSw){
                if(panelCmd.size() >= 5 ){
                JOptionPane.showMessageDialog(null, "Số Lệnh đã vượt quá 5 ","Lỗi",JOptionPane.OK_OPTION);
                }else {
                sw(x,y);            
                buttonClicked++;
                y += 100;
        }
        
        }
        else if(e.getSource() == btnAnd|| e.getSource() == mnuiAnd){
            if(panelCmd.size() >= 5 ){
            JOptionPane.showMessageDialog(null, "Số Lệnh đã vượt quá 5 ","Lỗi",JOptionPane.OK_OPTION);
            } else {
            and(x,y);            
            buttonClicked++;
            y += 100;
        }
            }
        else if(e.getSource() == btnOr || e.getSource()== mnuiOr){
            if(panelCmd.size() >= 5 ){
            JOptionPane.showMessageDialog(null, "Số Lệnh đã vượt quá 5 ","Lỗi",JOptionPane.OK_OPTION);
            } else {
            or(x,y);            
            buttonClicked++;
            y += 100;
        }
        }
        else {if(e.getSource() == btnSlt || e.getSource()== mnuiSlt){
            if(panelCmd.size() >= 5 ){
            JOptionPane.showMessageDialog(null, "Số Lệnh đã vượt quá 5 ","Lỗi",JOptionPane.OK_OPTION);
            } else {
            slt(x,y);            
            buttonClicked++;
            y += 100;   
            }
            }
        else{
            int lenhRD;
            for(int i= 0;i<panelCmd.size();i++){
                lenhRD=0;
                if(e.getSource() == btnDelLenh.get(i)){
                    y = panelCmd.get(i).getY();
                    panelCmd.get(i).setVisible(false);

                    if(InsType.get(i) == cmd.ADD || InsType.get(i) == cmd.SLT ||InsType.get(i) == cmd.AND || InsType.get(i) == cmd.SUB || InsType.get(i) == cmd.OR     ){
                        
                        for(int g=i;g>=0;g--)
                        {
                            if(InsType.get(g) == cmd.ADD || InsType.get(g) == cmd.SLT ||InsType.get(g) == cmd.AND || InsType.get(g) == cmd.SUB || InsType.get(g) == cmd.OR     )
                            {
                                lenhRD++;
                            }
                        }
                        cboRD.remove(lenhRD-1);
                    }
                    removePanel(i);
                    for (int k = i ; k<panelCmd.size();k++){
                        panelCmd.get(k).setBorder(new TitledBorder("Lệnh "+ (k+1)));
                        panelCmd.get(k).setLocation(x,y);
                        y+=100;
                    }
                    i--;
                    buttonClicked--;
                    pnlView.repaint();
                }
       
            }
        }}   
    }
   }
    public void removePanel(int i){
        if(InsType.get(i) == cmd.ADD || InsType.get(i) == cmd.SLT ||InsType.get(i) == cmd.AND || InsType.get(i) == cmd.SUB || InsType.get(i) == cmd.OR    )
        {
            lblLenh.remove(i);
            cboRS.remove(i);
            cboRT.remove(i);
            btnDelLenh.remove(i);
            InsType.remove(i);
            panelCmd.remove(i);
            
        }else {
            cboRS.remove(i);
            cboRT.remove(i);
            lblLenh.remove(i);
            btnDelLenh.remove(i);
            InsType.remove(i);
            panelCmd.remove(i);
            
        }
        
    }

    
    
private int buttonClicked=1;
private int i=0;
private DrawPipeline drawpanel;
private static ArrayList<JButton> btnDelLenh;

    public static ArrayList<JButton> getBtnDelLenh() {
        return btnDelLenh;
    }
private final ArrayList<JComboBox> cboRD;
private final ArrayList<JComboBox> cboRT;
private final ArrayList<JComboBox> cboRS;
private final ArrayList<JLabel> lblLenh;
private final ArrayList<JPanel> panelCmd;
private final ArrayList<JTextField> tfoffset;
private static ArrayList<cmd> InsType;

    public static ArrayList<cmd> getInsType() {
        return InsType;
    }
private final int x = 10;
private int y = 10;
private final ListenForButton lForButton;
private final String [] Reg = {"<choose>","s0","s1","s2","s3","s4","s5","s6","s7","t0","t1","t2","t3","t4","t5","t6","t7"};   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAnd;
    private javax.swing.JButton btnBatDau;
    private javax.swing.JButton btnLw;
    private javax.swing.JButton btnOr;
    private javax.swing.JButton btnSlt;
    private javax.swing.JButton btnSub;
    private javax.swing.JButton btnSw;
    private javax.swing.ButtonGroup gbtCheDo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenu mnuCheDo;
    private javax.swing.JMenu mnuGiupdo;
    private javax.swing.JMenu mnuLenh;
    private javax.swing.JMenuItem mnuiAbout;
    private javax.swing.JMenuItem mnuiAdd;
    private javax.swing.JMenuItem mnuiAnd;
    private javax.swing.JMenuItem mnuiBatDau;
    private javax.swing.JMenuItem mnuiDatapath;
    private javax.swing.JMenuItem mnuiGuide;
    private javax.swing.JMenuItem mnuiLw;
    private javax.swing.JMenuItem mnuiOr;
    private javax.swing.JMenuItem mnuiPipeline;
    private javax.swing.JMenuItem mnuiSlt;
    private javax.swing.JMenuItem mnuiSub;
    private javax.swing.JMenuItem mnuiSw;
    private javax.swing.JPanel pnlCmd;
    private javax.swing.JPanel pnlView;
    private javax.swing.JRadioButton rbtForwarding;
    private javax.swing.JRadioButton rbtNonForwarding;
    private javax.swing.JScrollPane scpLenh;
    private javax.swing.JScrollPane scrpModelDraw;
    private javax.swing.JTextField tfChuki;
    // End of variables declaration//GEN-END:variables
}

enum cmd {
        ADD,SUB,OR,AND,SLT,SW,LW,BEQ,NONE;
    }
