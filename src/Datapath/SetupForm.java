/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Datapath;

import java.awt.Color;
import java.awt.RenderingHints;
import java.awt.TrayIcon;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;


 /*
 * @author Huy
 */
public class SetupForm extends javax.swing.JFrame {

    /**
     * Creates new form SetupForm
     */
    
    
    public SetupForm() {
        initComponents();
        getConfigFromModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblColorCrit = new javax.swing.JLabel();
        lblColorIns = new javax.swing.JLabel();
        lblColorUni = new javax.swing.JLabel();
        cbbColorCrit = new javax.swing.JComboBox<>();
        cbbColorIns = new javax.swing.JComboBox<>();
        cbbColorUni = new javax.swing.JComboBox<>();
        lblDoDay = new javax.swing.JLabel();
        spDoDay = new javax.swing.JSpinner();
        lblRendering = new javax.swing.JLabel();
        lblAntiAliasing = new javax.swing.JLabel();
        rdoAntiAliasing = new javax.swing.JRadioButton();
        cbbRendering = new javax.swing.JComboBox<>();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cài đặt");
        setBounds(new java.awt.Rectangle(500, 250, 0, 0));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        lblColorCrit.setText("Màu Critical Line");

        lblColorIns.setText("Màu Instruction Line");

        lblColorUni.setText("Màu Unimportant Line");

        cbbColorCrit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Đen", "Xanh biển đậm", "Xanh da trời", "Xanh lá", "Xám", "Xám nhạt", "Xám đậm", "Đỏ", "Cam", "Hồng đậm", "Hồng", "Trắng", "Vàng" }));

        cbbColorIns.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Đen", "Xanh biển đậm", "Xanh da trời", "Xanh lá", "Xám", "Xám nhạt", "Xám đậm", "Đỏ", "Cam", "Hồng đậm", "Hồng", "Trắng", "Vàng" }));

        cbbColorUni.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Đen", "Xanh biển đậm", "Xanh da trời", "Xanh lá", "Xám", "Xám nhạt", "Xám đậm", "Đỏ", "Cam", "Hồng đậm", "Hồng", "Trắng", "Vàng" }));

        lblDoDay.setText("Độ dày của Line");

        SpinnerModel spModel = new SpinnerNumberModel(3.5d,1d,10d,0.5d);
        spDoDay.setModel(spModel);

        lblRendering.setText("Rendering");

        lblAntiAliasing.setText("Anti-Aliasing");

        rdoAntiAliasing.setText("On");
        rdoAntiAliasing.setSelected(true);

        cbbRendering.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Quality", "Speed" }));
        cbbRendering.setSelectedIndex(2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblColorCrit)
                    .addComponent(lblColorIns)
                    .addComponent(lblColorUni)
                    .addComponent(lblDoDay)
                    .addComponent(lblAntiAliasing)
                    .addComponent(lblRendering))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbbColorUni, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbbColorIns, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbbColorCrit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rdoAntiAliasing)
                    .addComponent(spDoDay, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbRendering, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblColorCrit)
                    .addComponent(cbbColorCrit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblColorIns)
                    .addComponent(cbbColorIns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblColorUni)
                    .addComponent(cbbColorUni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoDay)
                    .addComponent(spDoDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAntiAliasing)
                    .addComponent(rdoAntiAliasing))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRendering)
                    .addComponent(cbbRendering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getConfigFromModel()
    {
        switch(ModelDrawing.colorCrit)
        {
             case Black: cbbColorCrit.setSelectedItem("Đen"); break;
             case Blue: cbbColorCrit.setSelectedItem("Xanh biển đậm"); break;
             case Cyan:cbbColorCrit.setSelectedItem("Xanh da trời"); break;
             case Green:cbbColorCrit.setSelectedItem("Xanh lá"); break;
             case Gray:cbbColorCrit.setSelectedItem("Xám"); break;
             case DarkGray:cbbColorCrit.setSelectedItem("Xám đậm"); break;
             case LightGray:cbbColorCrit.setSelectedItem("Xám nhạt"); break;
             case Magenta:cbbColorCrit.setSelectedItem("Hồng đậm"); break;
             case Orange:cbbColorCrit.setSelectedItem("Cam"); break;
             case Pink:cbbColorCrit.setSelectedItem("Hồng"); break;
             case White:cbbColorCrit.setSelectedItem("Trắng"); break;
             case Yellow:cbbColorCrit.setSelectedItem("Vàng"); break;
             default:
             case Red: cbbColorCrit.setSelectedItem("Đỏ"); break;
        }
        switch(ModelDrawing.colorIns)
        {
             case Black: cbbColorIns.setSelectedItem("Đen"); break;
             case Blue: cbbColorIns.setSelectedItem("Xanh biển đậm"); break;
             case Green:cbbColorIns.setSelectedItem("Xanh lá"); break;
             case Gray:cbbColorIns.setSelectedItem("Xám"); break;
             case DarkGray:cbbColorIns.setSelectedItem("Xám đậm"); break;
             case LightGray:cbbColorIns.setSelectedItem("Xám nhạt"); break;
             case Magenta:cbbColorIns.setSelectedItem("Hồng đậm"); break;
             case Orange:cbbColorIns.setSelectedItem("Cam"); break;
             case Pink:cbbColorIns.setSelectedItem("Hồng"); break;
             case Red:cbbColorIns.setSelectedItem("Đỏ"); break;
             case White:cbbColorIns.setSelectedItem("Trắng"); break;
             case Yellow:cbbColorIns.setSelectedItem("Vàng"); break;
             default:
                 case Cyan:cbbColorIns.setSelectedItem("Xanh da trời"); break;
        }
        switch(ModelDrawing.colorUni)
        {
             case Black: cbbColorUni.setSelectedItem("Đen"); break;
             case Blue: cbbColorUni.setSelectedItem("Xanh biển đậm"); break;
             case Cyan:cbbColorUni.setSelectedItem("Xanh da trời"); break;
             case Green:cbbColorUni.setSelectedItem("Xanh lá"); break;
             case DarkGray:cbbColorUni.setSelectedItem("Xám đậm"); break;
             case LightGray:cbbColorUni.setSelectedItem("Xám nhạt"); break;
             case Magenta:cbbColorUni.setSelectedItem("Hồng đậm"); break;
             case Orange:cbbColorUni.setSelectedItem("Cam"); break;
             case Pink:cbbColorUni.setSelectedItem("Hồng"); break;
             case Red:cbbColorUni.setSelectedItem("Đỏ"); break;
             case White:cbbColorUni.setSelectedItem("Trắng"); break;
             case Yellow:cbbColorUni.setSelectedItem("Vàng"); break;
             default:
                 case Gray:cbbColorUni.setSelectedItem("Xám"); break;
        }
        spDoDay.setValue((double)ModelDrawing.thickness);
        if(ModelDrawing.renderhints.get(RenderingHints.KEY_ANTIALIASING) == RenderingHints.VALUE_ANTIALIAS_ON)
            rdoAntiAliasing.setSelected(true);
        else
            rdoAntiAliasing.setSelected(false);
        if(ModelDrawing.renderhints.get(RenderingHints.KEY_RENDERING)== RenderingHints.VALUE_RENDER_DEFAULT)
            cbbRendering.setSelectedItem("Default");
        else if(ModelDrawing.renderhints.get(RenderingHints.KEY_RENDERING)== RenderingHints.VALUE_RENDER_QUALITY)
            cbbRendering.setSelectedItem("Quality");
        else if(ModelDrawing.renderhints.get(RenderingHints.KEY_RENDERING)== RenderingHints.VALUE_RENDER_SPEED)
            cbbRendering.setSelectedItem("Speed");
    }
    
    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:
        String strCrit = cbbColorCrit.getItemAt(cbbColorCrit.getSelectedIndex());
        String strIns = cbbColorIns.getItemAt(cbbColorIns.getSelectedIndex());
        String strUni = cbbColorUni.getItemAt(cbbColorUni.getSelectedIndex());
        if((!strCrit.equals("Default")&&!strIns.equals("Default")&&!strUni.equals("Default"))&&(strCrit.equals(strIns) || strIns.equals(strUni)|| strCrit.equals(strUni)))
        {
            JOptionPane.showMessageDialog(null,"Màu của từng line không được giống nhau", "Warning", JOptionPane.ERROR_MESSAGE);
        }
        else if(strCrit.equals("Default")&&(strIns.equals("Đỏ")||strUni.equals("Đỏ")))
        {
            JOptionPane.showMessageDialog(null,"Màu của Critical Line đang là default, Instruction Line và Unimportant Line không được là màu đỏ", "Warning", JOptionPane.ERROR_MESSAGE);
        }
        else if(strIns.equals("Default")&&(strCrit.equals("Xanh da trời")||strUni.equals("Xanh da trời")))
        {
            JOptionPane.showMessageDialog(null,"Màu của Instruction Line đang là default, Critical Line và Unimportant Line không được là màu xanh da trời", "Warning", JOptionPane.ERROR_MESSAGE);
        }
        else if(strUni.equals("Default")&&(strCrit.equals("Xám")||strIns.equals("Xám")))
        {
            JOptionPane.showMessageDialog(null,"Màu của Unimportant Line đang là default, Critical Line và Instruction Line không được là màu xám", "Warning", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            SetupColor();
            SetupThickness();
            SetupRender();
            this.dispose();
        }
    }//GEN-LAST:event_btnOKActionPerformed

   
    
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void SetupColor()
    {
        switch(cbbColorCrit.getItemAt(cbbColorCrit.getSelectedIndex()))
        {
            case "Đen": ModelDrawing.colorCrit = LineColor.Black; break;
            case "Xanh biển đậm": ModelDrawing.colorCrit = LineColor.Blue; break;
            case "Xanh da trời": ModelDrawing.colorCrit = LineColor.Cyan; break;
            case "Xanh lá": ModelDrawing.colorCrit = LineColor.Green; break;
            case "Xám": ModelDrawing.colorCrit = LineColor.Gray; break;
            case "Xám nhạt": ModelDrawing.colorCrit = LineColor.LightGray; break;
            case "Xám đậm": ModelDrawing.colorCrit = LineColor.DarkGray; break;
            case "Đỏ": ModelDrawing.colorCrit = LineColor.Red; break;
            case "Hồng đậm": ModelDrawing.colorCrit = LineColor.Magenta; break;
            case "Cam": ModelDrawing.colorCrit = LineColor.Orange; break;
            case "Hồng": ModelDrawing.colorCrit = LineColor.Pink; break;
            case "Trắng": ModelDrawing.colorCrit = LineColor.White; break;
            case "Vàng": ModelDrawing.colorCrit = LineColor.Yellow; break;
            default : ModelDrawing.colorCrit = LineColor.Default;break;
        }
        switch(cbbColorIns.getItemAt(cbbColorIns.getSelectedIndex()))
        {
            case "Đen": ModelDrawing.colorIns = LineColor.Black; break;
            case "Xanh biển đậm": ModelDrawing.colorIns = LineColor.Blue; break;
            case "Xanh da trời": ModelDrawing.colorIns = LineColor.Cyan; break;
            case "Xanh lá": ModelDrawing.colorIns = LineColor.Green; break;
            case "Xám": ModelDrawing.colorIns = LineColor.Gray; break;
            case "Xám nhạt": ModelDrawing.colorIns = LineColor.LightGray; break;
            case "Xám đậm": ModelDrawing.colorIns = LineColor.DarkGray; break;
            case "Đỏ": ModelDrawing.colorIns = LineColor.Red; break;
            case "Hồng đậm": ModelDrawing.colorIns = LineColor.Magenta; break;
            case "Cam": ModelDrawing.colorIns = LineColor.Orange; break;
            case "Hồng": ModelDrawing.colorIns = LineColor.Pink; break;
            case "Trắng": ModelDrawing.colorIns = LineColor.White; break;
            case "Vàng": ModelDrawing.colorIns = LineColor.Yellow; break;
            default :ModelDrawing.colorIns = LineColor.Default;break;
        }
        switch(cbbColorUni.getItemAt(cbbColorUni.getSelectedIndex()))
        {
            case "Đen": ModelDrawing.colorUni = LineColor.Black; break;
            case "Xanh biển đậm": ModelDrawing.colorUni = LineColor.Blue; break;
            case "Xanh da trời": ModelDrawing.colorUni = LineColor.Cyan; break;
            case "Xanh lá": ModelDrawing.colorUni = LineColor.Green; break;
            case "Xám": ModelDrawing.colorUni = LineColor.Gray; break;
            case "Xám nhạt": ModelDrawing.colorUni = LineColor.LightGray; break;
            case "Xám đậm": ModelDrawing.colorUni = LineColor.DarkGray; break;
            case "Đỏ": ModelDrawing.colorUni = LineColor.Red; break;
            case "Hồng đậm": ModelDrawing.colorUni = LineColor.Magenta; break;
            case "Cam": ModelDrawing.colorUni = LineColor.Orange; break;
            case "Hồng": ModelDrawing.colorUni = LineColor.Pink; break;
            case "Trắng": ModelDrawing.colorUni = LineColor.White; break;
            case "Vàng": ModelDrawing.colorUni = LineColor.Yellow; break;
            default :ModelDrawing.colorUni = LineColor.Default;break;
        }
    }
    
    private void SetupThickness()
    {
        ModelDrawing.thickness = Float.parseFloat(spDoDay.getValue().toString());
    }
    
    private void SetupRender()
    {
        if(rdoAntiAliasing.isSelected())
            ModelDrawing.renderhints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        else
            ModelDrawing.renderhints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        switch (cbbRendering.getItemAt(cbbRendering.getSelectedIndex())) {
            case "Default":
                ModelDrawing.renderhints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_DEFAULT);
                break;
            case "Quality":
                ModelDrawing.renderhints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                break;
            case "Speed":
                ModelDrawing.renderhints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);
                break;
            default:
                break;
        }
    }
    /**
     * @param args the command line arguments
     */
    public final void StartSetupForm() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SetupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SetupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SetupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SetupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SetupForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JComboBox<String> cbbColorCrit;
    private javax.swing.JComboBox<String> cbbColorIns;
    private javax.swing.JComboBox<String> cbbColorUni;
    private javax.swing.JComboBox<String> cbbRendering;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAntiAliasing;
    private javax.swing.JLabel lblColorCrit;
    private javax.swing.JLabel lblColorIns;
    private javax.swing.JLabel lblColorUni;
    private javax.swing.JLabel lblDoDay;
    private javax.swing.JLabel lblRendering;
    private javax.swing.JRadioButton rdoAntiAliasing;
    private javax.swing.JSpinner spDoDay;
    // End of variables declaration//GEN-END:variables
}
